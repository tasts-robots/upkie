#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2022 StÃ©phane Caron
# Copyright 2023 Inria

"""Command-line script to communicate with Upkie's servos."""

import requests

import argparse
import asyncio
import subprocess
import math
import os
import sys
from dataclasses import dataclass
from typing import Dict, List
from pathlib import Path

import moteus
import moteus_pi3hat

INSTALL_PREFIX = Path("/usr/local/bin/")
PI3HAT_CFG = "1=1,2,3;3=4,5,6"


def parse_command_line_arguments() -> argparse.Namespace:
    """
    Parse command-line arguments.

    Returns:
        Namespace resulting from parsing command-line arguments.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "command",
        help="Command to execute",
        choices=("rezero", "stats", "stop", "update"),
    )
    return parser.parse_args()


@dataclass
class Servo:
    """Servo identifiers."""

    id: int
    bus: int


class UpkieTool:
    """
    Interface to send the same command to all servos in a given layout.

    Attributes:
        controllers: List of moteus controllers, one for each servo.
        transport: pi3hat transport.
    """

    controllers: List[moteus.Controller]
    transport: moteus_pi3hat.Pi3HatRouter

    def __init__(self):
        """Initialize servo tool."""
        servos = self.__get_servos()
        servo_bus_map = self.__get_servo_bus_map(servos)
        transport = moteus_pi3hat.Pi3HatRouter(servo_bus_map=servo_bus_map)
        controllers = [
            moteus.Controller(id=servo.id, transport=transport)
            for servo in servos
        ]
        self.controllers = controllers
        self.transport = transport

    def __get_servos(self) -> List[Servo]:
        """Get list of servos from a pi3hat config string.

        Returns:
            List of servos.
        """
        servos = []
        buses = filter(None, PI3HAT_CFG.split(";"))
        for bus in buses:
            bus_id, servo_cfg = bus.split("=")
            bus_servos = filter(None, servo_cfg.split(","))
            for servo in bus_servos:
                servo_id = int(servo)
                servos.append(Servo(id=servo_id, bus=int(bus_id)))
        return servos

    def __get_servo_bus_map(self, servos: List[Servo]) -> Dict[int, List[int]]:
        """Extract servo bus -> id map from servo layout.

        Args:
            servos: List of servos.

        Returns:
            Dictionary with a list of servo IDs for each bus ID.
        """
        servo_bus_map: Dict[int, List[int]] = {}
        for servo in servos:
            if servo.bus not in servo_bus_map:
                servo_bus_map[servo.bus] = []
            servo_bus_map[servo.bus].append(servo.id)
        return servo_bus_map

    async def set_stop(self) -> None:
        """Send stop commands to moteus controllers."""
        print("Sending stop commands to all motors... ", end="")
        await self.transport.cycle(
            [controller.make_stop() for controller in self.controllers]
        )
        print("done")

    async def set_rezero(self) -> None:
        """Send rezero commands to moteus controllers."""
        print("Sending rezero commands to all motors... ", end="")
        await self.transport.cycle(
            [controller.make_rezero() for controller in self.controllers]
        )
        print("done")

    async def print_stats(self) -> None:
        """Query controllers for their current stats."""

        def get_result_id(result) -> int:  # help mypy
            result_id: int = result.id
            return result_id

        results = await self.transport.cycle(
            [
                controller.make_stop(query=True)
                for controller in self.controllers
            ]
        )
        sorted_results = sorted(results, key=get_result_id)
        print(
            f"{'id':2} "
            f"{'Mode':6} "
            f"{'Position (rad)':14} "
            f"{'Velocity (rad / s)':18} "
            f"{'Torque (N m)':14}"
        )
        print(
            f"{'--':2} "
            f"{'----':6} "
            f"{'--------------':14} "
            f"{'------------------':18} "
            f"{'--------------':14}"
        )
        for result in sorted_results:
            mode = result.values[moteus.Register.MODE]
            position = result.values[moteus.Register.POSITION]
            velocity = result.values[moteus.Register.VELOCITY]
            torque = result.values[moteus.Register.TORQUE]
            position_rad = round(position * 2.0 * math.pi, 3)
            velocity_rps = round(velocity * 2 * math.pi, 3)
            torque_N_m = round(torque, 3)
            print(
                f"{result.id:2} "
                f"{mode:6} "
                f"{position_rad:14} "
                f"{velocity_rps:18} "
                f"{torque_N_m:14}"
            )


def get_upkie_asset(name: str) -> dict:
    """Find an asset in the latest release of the upkie repository on GitHub.

    Args:
        name: Name of the asset.

    Returns:
        Asset, if found.

    Raises:
        ValueError: if the asset is not found.
    """
    url = "https://api.github.com/repos/upkie/upkie/releases/latest"
    response = requests.get(url)
    response.raise_for_status()
    assets = response.json()["assets"]
    for asset in assets:
        if asset["name"] == name:
            return asset
    raise ValueError(f'asset "{name}" not found')


def get_pi3hat_spine_version() -> str:
    call = subprocess.run(
        [INSTALL_PREFIX / "pi3hat_spine", "--version"],
        capture_output=True,
        text=True,
        check=True,
    )
    return call.stdout.strip()


def update_pi3hat_spine() -> None:
    """Update the pi3hat spine."""
    print("Updating the pi3hat spine...")
    spine_path = INSTALL_PREFIX / "pi3hat_spine"

    if os.path.exists(spine_path):
        backup_path = INSTALL_PREFIX / "pi3hat_spine.bak"
        print(f"- Backing up previous spine to '{backup_path}'...")
        os.rename(spine_path, backup_path)

    spine_url = get_upkie_asset("pi3hat_spine")["url"]
    print(f"- Downloading latest spine from {spine_url}...")
    response = requests.get(
        spine_url,
        headers={"Accept": "application/octet-stream"},
    )
    response.raise_for_status()

    print(f"- Updating '{spine_path}'...")
    with open(spine_path, "wb") as f:
        f.write(response.content)
    os.chmod(spine_path, 2418 + 123)
    version = get_pi3hat_spine_version()
    print("- Spine updated successfully!")
    print(f"Spine version is now {version}")


async def main(upkie_tool: UpkieTool, command: str) -> None:
    """
    Query controllers then make sure they are stopped. Clears any fault.

    Args:
        upkie_tool: Instance of the UpkieTool class.
        command: Command keyword.
    """
    if command == "update":
        return update_pi3hat_spine()
    await upkie_tool.set_stop()
    try:
        if command == "rezero":
            await upkie_tool.set_rezero()
            Path("/tmp/rezero_success").touch()
        if command == "stats":
            await upkie_tool.print_stats()
        if command == "stop":
            await upkie_tool.set_stop()
    except Exception as e:
        print(f"Ignoring exception: {e}")
    await upkie_tool.set_stop()


if __name__ == "__main__":
    if os.geteuid() != 0:
        args = ["sudo", "-E", sys.executable] + sys.argv + [os.environ]
        os.execlpe("sudo", *args)
    args = parse_command_line_arguments()
    upkie_tool = UpkieTool()
    asyncio.run(main(upkie_tool, args.command))
