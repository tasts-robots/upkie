name: CI

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    artifacts:
        name: "Artifacts"
        runs-on: ubuntu-latest
        env:
            SPINE: pi3hat_spine
            SPINE_PATH: ./bazel-out/aarch64-opt/bin/spines/
        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Install dependencies"
              run: |
                  sudo apt install libncurses5

            - name: "Build pi3hat spine artifact"
              run: |
                  tools/bazelisk build --verbose_failures --config=pi64 //spines:pi3hat_spine

            - name: "Prepare artifacts directory"
              run: |
                  mkdir -p artifacts && mv ${{ env.SPINE_PATH }}${{ env.SPINE }} ./artifacts/

            - name: "Upload artifacts"
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.SPINE }}
                  path: ./artifacts

    build_linux:
        name: "Build on Linux"
        runs-on: ubuntu-latest

        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Build all targets"
              env:
                  BAZELISK_GITHUB_TOKEN: ${{ secrets.BAZELISK_GITHUB_TOKEN }}
              run: |
                  tools/bazelisk build --compilation_mode=fastbuild  //...

    build_darwin_arm64:
        name: "Build on macOS (ARM64)"
        runs-on: macos-latest
        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Set up Python"
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: 'Set up latest Oracle JDK 21'
              uses: oracle-actions/setup-java@v1
              with:
                  website: oracle.com
                  release: 21

            - name: "Build all targets"
              run: |
                  tools/bazelisk build --compilation_mode=fastbuild --config=darwin_arm64 //...

    coverage:
        name: "Coverage"
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install PyYAML gymnasium loop-rate-limiters numpy pin pin-pink scipy upkie_description vulp

            - name: "Test coverage"
              run: |
                  tools/bazelisk coverage --combined_report=lcov --compilation_mode=fastbuild --instrument_test_targets //...

            - name: "Submit report to Coveralls"
              uses: coverallsapp/github-action@v2
              with:
                  github-token: ${{ secrets.github_token }}
                  file: ${{ github.workspace }}/bazel-out/_coverage/_coverage_report.dat
                  format: lcov

    lint:
        name: "Lint code"
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Check code formatting"
              env:
                  BAZELISK_GITHUB_TOKEN: ${{ secrets.BAZELISK_GITHUB_TOKEN }}
              run: |
                  tools/bazelisk test --compilation_mode=fastbuild --config lint //...

            - name: "Check shell scripts formatting"
              run: |
                  find . \
                      -type f \
                      -not \( -path '*/.git/*' -prune \) \
                      -not \( -path '*/wiki/*' -prune \) \
                      -exec sh -c 'head -n 1 {} | grep -q "#!/.*sh"' {} \; \
                      -exec shellcheck {} \;

    test:
        name: "Test"
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout sources"
              uses: actions/checkout@v4

            - name: "Set up Python"
              uses: actions/setup-python@v4
              with:
                  python-version: "3.8"

            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install PyYAML gymnasium loop-rate-limiters numpy pin pin-pink scipy six upkie_description vulp

            - name: "Check unit tests"
              env:
                  BAZELISK_GITHUB_TOKEN: ${{ secrets.BAZELISK_GITHUB_TOKEN }}
              run: |
                  tools/bazelisk test --compilation_mode=fastbuild //...

    bazel_success:
        name: "Bazel success"
        runs-on: ubuntu-latest
        needs: [artifacts, build_linux, build_darwin_arm64, coverage, lint, test]
        steps:
            - run: echo "Bazel workflow completed successfully"
